<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>One Day</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2014-08-24T17:30:00+08:00</updated><entry><title>你家后院的最美公路</title><link href="/ni-jia-hou-yuan-de-zui-mei-gong-lu.html" rel="alternate"></link><updated>2014-08-24T17:30:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2014-08-24:ni-jia-hou-yuan-de-zui-mei-gong-lu.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/Awesome_1408872874030.jpg" style=" height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;趁着天气放晴， 把摩托车拖出来跑起， 往车行跑的时候， 又看到了这条路。&lt;/p&gt;
&lt;p&gt;位置在蝶园后面， 有一段封闭的余杭塘路， 几乎没有人来往。&lt;/p&gt;
&lt;p&gt;在桥那里有条小路下去， 就进入了一个公园。&lt;/p&gt;
&lt;p&gt;打算在杭州这段时间做一个系列， 叫做你家后院的最美XXX。&lt;/p&gt;</summary></entry><entry><title>重返徒步北高峰</title><link href="/zhong-fan-tu-bu-bei-gao-feng.html" rel="alternate"></link><updated>2014-08-24T00:00:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2014-08-24:zhong-fan-tu-bu-bei-gao-feng.html</id><summary type="html">&lt;h3&gt;北高峰&lt;/h3&gt;
&lt;p&gt;之前很长时间都没有爬山， 这周赶上学校校友会组织爬山， 虽然知道我们这种和尚学校组织活动十有八九是一大波好基友黑压压的一片然后聊一路技术问题， 还是拉上了人一起去了。&lt;/p&gt;
&lt;p&gt;体力果然下滑的很明显， 差不多到亭子那里， 大家就开始讨论是植物园下山还是北高峰下山， 鉴于这么久没运动， 还是咬咬牙往北高峰进发了。&lt;/p&gt;
&lt;p&gt;过程中陆陆续续的有人休息， 最后相对休闲的频率登上了北高峰， 校友会的大师兄和他女儿已经在山顶等了。&lt;/p&gt;
&lt;p&gt;这是到峰顶财神庙的照片&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/PA070060.jpg" style=" height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;下山的过程相对就轻松了， 顺路也拍了两张照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/PA070063.jpg" style=" height: auto; max-width: 100%;"/&gt;
&lt;img alt="" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/PA070064.jpg" style=" height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;整条线路坡度比较陡的实际上是在老和山上山后那一段， 过了植物园的岔路口， 整体就没什么太长的破路了。&lt;/p&gt;
&lt;h3&gt;返程&lt;/h3&gt;
&lt;p&gt;出灵隐比较悲剧， 一直没有坐到车， 最后去西湖边绕了一圈才回来， 顺路去修了失灵的手机。
&lt;img alt="" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/PA070068.jpg" style=" height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;h3&gt;云水驿&lt;/h3&gt;
&lt;p&gt;回来和同学去了云水驿吃饭， 驻场的两个妹子唱的还不错。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/PA070072.jpg" style=" height: auto; max-width: 100%;"/&gt;&lt;/p&gt;</summary></entry><entry><title>萤火虫</title><link href="/ying-huo-chong.html" rel="alternate"></link><updated>2014-08-20T00:00:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2014-08-20:ying-huo-chong.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/yinghuochong.jpg" style=" height: auto; max-width: 100%;"/&gt;&lt;/p&gt;
&lt;p&gt;看到萤火虫， 是很小很小的时候，那个时候晚上捉几只萤火虫， 放在麦秆里，就能当手电筒用。&lt;/p&gt;
&lt;p&gt;以前曾经有那么一条路， 走进去的时候才发现， 林荫间飞舞着萤火虫， 那一瞬间， 跟梦一样。&lt;/p&gt;
&lt;p&gt;今天去了雨中的湿地散心， 前几天打趣：这天看萤火虫， 全淹死了吧。&lt;/p&gt;
&lt;p&gt;然后我真的看见了萤火虫， 虽然只有那么微弱的光芒。&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;对这初升的日头，得抱着虔敬的心......便是像今天这样灰暗愁闷的日子，你也得爱......现在是冬天，一切都睡着了。将来大地会醒过来的。
                                                                    -- 《约翰·克里斯朵夫》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>机器学习的野路子</title><link href="/ji-qi-xue-xi-de-ye-lu-zi.html" rel="alternate"></link><updated>2014-08-19T00:00:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2014-08-19:ji-qi-xue-xi-de-ye-lu-zi.html</id><summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;机器学习很大程度上归为三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;问题定义&lt;/li&gt;
&lt;li&gt;数据准备&lt;/li&gt;
&lt;li&gt;特征工程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在漫漫长河中， 各路人士留下个各种民间智慧。&lt;/p&gt;
&lt;h1&gt;ABE：永远在融合&lt;/h1&gt;
&lt;p&gt;不管怎么样， ensembleing， 免费的午餐。&lt;/p&gt;
&lt;h1&gt;高置信度下才自动允许或者自动禁止&lt;/h1&gt;
&lt;h1&gt;Feature Hash&lt;/h1&gt;
&lt;p&gt;将高纬度的特征利用hash函数映射到低纬度的特征。&lt;/p&gt;
&lt;h1&gt;样本严重不均衡&lt;/h1&gt;
&lt;p&gt;将分类问题换成rank问题。&lt;/p&gt;
&lt;h1&gt;一坨坨的分类器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;bad， good&lt;/li&gt;
&lt;li&gt;bad a， bad b&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;性能瓶颈&lt;/h1&gt;
&lt;p&gt;十有八九在特征提取&lt;/p&gt;
&lt;h1&gt;指标监控&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;准确率， 召回率&lt;/li&gt;
&lt;li&gt;输入的特征分布&lt;/li&gt;
&lt;li&gt;输出的得分分布&lt;/li&gt;
&lt;li&gt;输出的分类结果分布&lt;/li&gt;
&lt;li&gt;人工介入&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;专家智慧&lt;/h1&gt;
&lt;p&gt;有时候允许砖家来拍规则， 前提的确是砖家&lt;/p&gt;</summary></entry><entry><title>噪音数据的处理</title><link href="/zao-yin-shu-ju-de-chu-li.html" rel="alternate"></link><updated>2014-08-19T00:00:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2014-08-19:zao-yin-shu-ju-de-chu-li.html</id><summary type="html">&lt;p&gt;最近在追踪模型的时候， 发现了一系列比较严重的数据污染， 有些来自于采集过程， 有些则是spam， 顺手整理了一下噪音处理的相关tips。&lt;/p&gt;
&lt;h1&gt;大数据中的预处理&lt;/h1&gt;
&lt;h1&gt;步骤&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据清洗&lt;/li&gt;
&lt;li&gt;数据集成&lt;/li&gt;
&lt;li&gt;数据转换&lt;/li&gt;
&lt;li&gt;数据降维&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;WHY&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;大数据带来的问题是， 海量的脏数据&lt;ul&gt;
&lt;li&gt;缺失：缺少某种类型的数据， 缺少部分样本的数据&lt;/li&gt;
&lt;li&gt;噪音：数据收集过程中导致的错误或者越界&lt;/li&gt;
&lt;li&gt;矛盾：数据之间互相矛盾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;没有高质量的数据， 就没有高质量的数据挖掘结果&lt;ul&gt;
&lt;li&gt;决策依赖于高质量的数据&lt;/li&gt;
&lt;li&gt;模型依赖于高质量的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;measure&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;准确度&lt;/li&gt;
&lt;li&gt;完整度&lt;/li&gt;
&lt;li&gt;一致性&lt;/li&gt;
&lt;li&gt;时间轴&lt;/li&gt;
&lt;li&gt;可信度&lt;/li&gt;
&lt;li&gt;附加值&lt;/li&gt;
&lt;li&gt;可解释性&lt;/li&gt;
&lt;li&gt;可获得性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;main mission&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据清洗: 缺失值填充， 噪音平滑， 异常值处理&lt;/li&gt;
&lt;li&gt;数据集成: 多种来源数据集成&lt;/li&gt;
&lt;li&gt;数据转换: 标准化&lt;/li&gt;
&lt;li&gt;数据降维: 合并相似数据   &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;data clean&lt;/h1&gt;
&lt;h3&gt;数据清洗步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;缺失值填充&lt;/li&gt;
&lt;li&gt;越界值界定&lt;/li&gt;
&lt;li&gt;噪音平滑&lt;/li&gt;
&lt;li&gt;不一致数据纠正 &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;缺失值&lt;/h1&gt;
&lt;p&gt;说的什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;忽略缺失值， 尤其在部分分类情况下&lt;/li&gt;
&lt;li&gt;手动添加&lt;/li&gt;
&lt;li&gt;常数值替换&lt;/li&gt;
&lt;li&gt;均值替换&lt;/li&gt;
&lt;li&gt;分类均值替换&lt;/li&gt;
&lt;li&gt;最可能值替换：利用贝叶斯或者决策树&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;噪音数据&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;噪音:随机错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;错误值产生原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集过程&lt;/li&gt;
&lt;li&gt;输入过程&lt;/li&gt;
&lt;li&gt;数据转化过程&lt;/li&gt;
&lt;li&gt;命名不一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其余数据问题 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复记录&lt;/li&gt;
&lt;li&gt;不完整数据&lt;/li&gt;
&lt;li&gt;不一致数据&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>使用pelican搭建博客</title><link href="/shi-yong-pelicanda-jian-bo-ke.html" rel="alternate"></link><updated>2014-08-18T00:00:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2014-08-18:shi-yong-pelicanda-jian-bo-ke.html</id><summary type="html">&lt;p&gt;之前的博客用的是octopress， 挺好的， 也没啥毛病， 就是我不会ruby，出个小问题纠结大半天。&lt;/p&gt;
&lt;p&gt;因为最熟悉的语言是python，找了下有没有python的frame，发现还真有： pelican。&lt;/p&gt;
&lt;p&gt;这下子就简单了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pip install pelican&lt;/li&gt;
&lt;li&gt;pip install Markdown&lt;/li&gt;
&lt;li&gt;pelican-quickstart&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些整完后就可以写blog了。&lt;/p&gt;
&lt;p&gt;很多人一上手就用了octopress， 反而弄混了，这里解释下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;github pages, 在gh-pages下都是html文件。&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;octopress、pelican、jeklly， 都是用来生成这些html的。&lt;/li&gt;
&lt;li&gt;理论上， 鉴于国内github的速度， 最好的办法是自己弄一台服务器，开一个最简单的http server。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了方便起见， 改写了MakeFile文件， 增加了对百度云的支持， 同时因为一部分文档是不适合泄露的，额外建立一个private的content和output的文件夹， 在MakeFile的html和serve那里增加了对这些的支持。&lt;/p&gt;
&lt;p&gt;申请了一台阿里云的服务器， 准备部署。&lt;/p&gt;
&lt;h2&gt;update&lt;/h2&gt;
&lt;p&gt;申请到阿里云的服务器了， 在服务器上用了个最简单的httpserver:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;nohup&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;SimpleHTTPServer&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在makefile里面配置rsync同步。
大家可以访问这个地址&lt;a href="http://www.juzishanshu.com"&gt;橘子杉树&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;额， 最终有个坑， gh-pages分支提交的是md文件， 对于我们的case提交的直接是最终的html， 所以应该提交到master这个分支。&lt;/p&gt;
&lt;h3&gt;update&lt;/h3&gt;
&lt;p&gt;今天让多个人访问的时候服务器就顶不住了， 主要原因是木器啊那图片是直接放web server上的。&lt;/p&gt;
&lt;p&gt;pelican原生对图片支持不太好， 它的插件库里面有一个better_figures_and_images，能够展示更优美的图片， 但是只支持本地图片， 我修改了这个插件&lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/better_figures_and_images"&gt;github地址&lt;/a&gt;, 需要的直接clone我的插件库就好， 相关修改已经提交pelican。&lt;/p&gt;
&lt;p&gt;申请了阿里云的oss， 简直是业界良心， 便宜好用耐操。 &lt;/p&gt;
&lt;h3&gt;update 2014 08 24&lt;/h3&gt;
&lt;p&gt;服务器换了nginx， 配置很简单， 修改下user， 修改下root之类的就好了。&lt;/p&gt;</summary></entry><entry><title>帮张侃找女朋友</title><link href="/bang-zhang-kan-zhao-nu-peng-you.html" rel="alternate"></link><updated>2013-12-19T00:00:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2013-12-19:bang-zhang-kan-zhao-nu-peng-you.html</id><summary type="html">&lt;p&gt;动车是杭州开往上海的， 我们的厂工张侃同学在西厂干活， 排除为了爱情现身的情况， 一周内有五天时间滞留杭州晚上可以出发邂逅。&lt;/p&gt;
&lt;p&gt;妹子的情况比较复杂， 一种可能是暂时来杭州旅游， 常驻上海； 一种是去上海旅游， 常驻杭州； 一种是和我们的厂工相似， 周末往上海跑。但是从妹子在车上的表现分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是常坐动车的应该对温度情况有充分的了解， 不会出现衣服不够导致冻着。&lt;/li&gt;
&lt;li&gt;如果是从上海来杭州玩返程， 会对车上温度也必然有所了解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们断定， 这个妹子， 是从杭州出发去上海玩的！
因此， 我们的张侃同学一周有五天时间有可能和妹子发生邂逅。&lt;/p&gt;
&lt;p&gt;根据杭州统计局的信息， 2012年杭州常住人口数目880.2万，女性人口占48.77%， 这里选择信任统计局的数据。&lt;/p&gt;
&lt;p&gt;我们假设张侃同学热爱生活， 出入健身房， 游泳池， 学校等扎堆的地方， 日均能达到和100个陌生人接触（这是一个很恐怖的数字……其实我们作弊了）。&lt;/p&gt;
&lt;p&gt;那个， 他一个月内再次遇到这个妹子的概率是 $ 20 \cdot 100 / 880.2w = 0.023\%$, 差不多是最近一次梵净山发生球状闪电的概率。&lt;/p&gt;
&lt;p&gt;如果我们假设年龄， 教育程度， 会影响活动空间， 那么根据统计局数据， 杭州市大学（指大专及以上）文化程度的人口为164.27万人， 这个概率就变成了$20 \cdot 100 / 164.27w = 0.12\% $。 和汽车钥匙互开概率差不多。&lt;/p&gt;
&lt;p&gt;所以……还是放弃一棵树， 追求整个森林比较靠谱。&lt;/p&gt;
&lt;p&gt;我们先选择Drake公式计算张侃找到女朋友的概率。这个公式由“搜寻地外文明”计划发起人弗兰克·德雷克发明，原本为估算银河系中可能的地外文明数量。
 Drake公式：&lt;/p&gt;
&lt;p&gt;$N = R_{\ast} \cdot f_p \cdot n_e \cdot f_e \cdot f_i \cdot f_c \cdot L$&lt;/p&gt;
&lt;p&gt;直接以两人相遇的概率来解释这个方程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N 潜在女友的数量&lt;/li&gt;
&lt;li&gt;$R_{\ast}$ 中国的人口增长量&lt;/li&gt;
&lt;li&gt;$f_p$ 中国人口中女性的比例&lt;/li&gt;
&lt;li&gt;$n_e$ 中国的女性中住在浙江省的比例&lt;/li&gt;
&lt;li&gt;$f_e$ 年龄合适的女性在其中所占的比率&lt;/li&gt;
&lt;li&gt;$f_i$ 年龄合适并有大学文凭的女性在其中所占比率&lt;/li&gt;
&lt;li&gt;$f_c$ 年龄合适、有大学文凭、我觉得长得好看的女性人数所占比率&lt;/li&gt;
&lt;li&gt;$L$ 我遇见这样的一个女孩需要的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着，一个月内，张侃同学每天晚上（20天）出去，遇上一个22岁到30岁之间、大学毕业的理想女孩的概率大于百分之一。&lt;/p&gt;
&lt;p&gt;当然还得考虑加进觉得码农幽默风趣的女孩的比率、单身女性的比率、能和码农相处甚欢的女性人数所占比率。&lt;/p&gt;
&lt;p&gt;加进这些因素后，概率会大大降低，变成300，000分之一，比起找到外星文明的概率高了100倍，还不坏。&lt;/p&gt;
&lt;p&gt;看到如此惨烈的情况， 我们老大震惊了， 决定向全阿里招聘优秀的算法工程师， 欢迎香甜可口的软妹子， 欢迎一起捡肥皂的好基友。欢迎加入天猫推荐算法团队。&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary></entry><entry><title>实时策略</title><link href="/online%20learning.html" rel="alternate"></link><updated>2013-12-18T00:00:00+08:00</updated><author><name>haoyuan.huhy@gmail.com</name></author><id>tag:,2013-12-18:online learning.html</id><summary type="html">&lt;p&gt;传统的推荐以离线为主， 以预测用户偏好品牌为例，大致分为这几个步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离线采集计算用户， 品牌等各个维度的特征。&lt;/li&gt;
&lt;li&gt;根据业务目标给出样本集合， 比如比较典型的CTR， 对于给定样本数据， 点击为正例， 不点击为负例。候选集的挑选有时候充满了trick， 尤其在业务的主体流量不是推荐的时候。&lt;/li&gt;
&lt;li&gt;使用模型进行离线训练， 以线性模型居多， 包括LR, pair-wise, list-wise等。在海量情况下， 复杂模型比较罕见。&lt;/li&gt;
&lt;li&gt;根据模型预测获得用户的偏好品牌列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相对于直接利用热门或者协同过滤做出的推荐， 这种方式能够获得良好的提升以及更好的泛化能力， 但是面对以下几种情况无能为力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每天有大量新用户拥入。&lt;/li&gt;
&lt;li&gt;用户对品牌的点击在过去没有特征， 看起来似乎是天外飞仙般出现， 但又不是热销。 &lt;/li&gt;
&lt;li&gt;无法实时的对用户的正反馈和负反馈进行算法上的回馈， 尤其是当你发现你X掉了一堆东西， 类似的商品还在源源不断的涌向你的时候。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实时的数据对于推荐系统而言， 是一座新的金矿， 可以为用户进行更准确地推荐， 同时及时响应各种反馈， 提升用户体验。 用户能感受到推荐系统和他的交互， 会更主动积极的贡献自己的行为特点， 从而形成良性循环。&lt;/p&gt;
&lt;p&gt;比较常见的一种做法是实时特征的引入， 训练过程依然在离线完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收集实时数据， 做离线训练&lt;/li&gt;
&lt;li&gt;做在线预测&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另一部分采用的是online learning, 利用用户不停的行为反馈（包含显式的和隐式的）， 来调整特征权重。&lt;/p&gt;
&lt;p&gt;现在在考虑一种在线增强学习的方式， 假定我们现在有四种投放策略：a, b, c, d。
对于缺乏历史信息的新用户， 在没有任何信息的情况下， 我们先以轮播的方式在所有的位置投放a, b, c, d四种策略。
随后我们采集相应的反馈信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击：显式正反馈&lt;/li&gt;
&lt;li&gt;删除： 显式负反馈&lt;/li&gt;
&lt;li&gt;未点击： 隐式负反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一过程中快速积累用户对不同策略的敏感程度，同时对离线的预测结果进行纠正。&lt;/p&gt;
&lt;p&gt;由于单独位置对用户的曝光机会有限， 需要以打通的眼光看待所有的投放位置， 将他作为一个整体：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;收集到显式负反馈的策略在全局降分&lt;/li&gt;
&lt;li&gt;收集到显式负反馈的目标在全局过滤&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最轻量级的快速尝试方式是， 对于某部分用户而言， 预估的投放策略可信度已经低于热门了， 或者补全的时候采用相似算法的可信度已经低于热门了， 就可以通过快速切换策略达到在线选择的目的。&lt;/p&gt;
&lt;p&gt;对于实时而言， 不仅仅是算法上的变更， 对系统架构也有巨大的挑战。
    下图是Netflix的实时推荐的架构图：
"&lt;img alt="Netflix架构" src="http://orange-tree.oss-cn-hangzhou.aliyuncs.com/blog-images/online系统.jpg" style=" height: auto; max-width: 100%;"/&gt;"&lt;/p&gt;
&lt;p&gt;系统上， Netflix分为online, near online, offline三个部分， nearline是用户最近的行为数据， 利用流失计算获得一些结果， 产生的结果送到online 用以更新模型。&lt;/p&gt;</summary></entry></feed>